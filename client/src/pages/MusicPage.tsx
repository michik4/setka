import React, { useEffect, useState, useRef, useCallback } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { Spinner } from '../components/Spinner/Spinner';
import styles from './MusicPage.module.css';
import { usePlayer } from '../contexts/PlayerContext';
import { useQueue } from '../contexts/QueueContext';
import UniversalTrackItem from '../components/UniversalTrackItem/UniversalTrackItem';
import UniversalMusicAlbumItem from '../components/UniversalAlbumItem/UniversalAlbumItem';
import { MusicService } from '../services/music.service';
import { MusicAlbumService } from '../services/music-album.service';
import { Search as SearchIcon, Add as AddIcon, Remove as RemoveIcon, LibraryMusic, QueueMusic, Audiotrack, Close as CloseIcon, Person } from '@mui/icons-material';
import { Link, useParams, useLocation } from 'react-router-dom';
import UploadAudio, { MultiUploadAudio } from '../components/UploadAudio';
import CreateAlbumModal from '../components/MusicAlbum/CreateAlbumModal';
import { api } from '../utils/api';

// –ü–æ–ª—É—á–∞–µ–º URL API –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const API_URL = process.env.REACT_APP_API_URL || '/api';
const MEDIA_URL = process.env.REACT_APP_MEDIA_URL || '/api/media';

const PRIMARY_ICON_SIZE = 24;
const SECONDARY_ICON_SIZE = 18;

interface Track {
    id: number;
    title: string;
    artist: string;
    duration: string;
    coverUrl: string;
    audioUrl: string;
    playCount: number;
}

interface MusicAlbum {
    id: number;
    title: string;
    description?: string;
    userId: number;
    coverUrl?: string;
    tracksCount: number;
    isPrivate: boolean;
    createdAt: string;
    updatedAt: string;
    tracks?: Track[];
    isInLibrary?: boolean;
}

interface PaginationInfo {
    total: number;
    page: number;
    limit: number;
    pages: number;
    hasMore: boolean;
    isLoading: boolean;
    lastFetchTime: number;
}

const MusicPage: React.FC = () => {
    const { user } = useAuth();
    const { userId: urlUserId } = useParams<{ userId?: string }>();
    const location = useLocation();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –ª–∏ –º—ã –º—É–∑—ã–∫—É –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const isViewingOtherUser = !!urlUserId && urlUserId !== String(user?.id);
    const targetUserId = isViewingOtherUser ? parseInt(urlUserId) : user?.id;
    
    const [otherUserName, setOtherUserName] = useState<string>('');
    const [createAlbumBlock, setCreateAlbumBlock] = useState(false);
    const [isCreateAlbumModalOpen, setIsCreateAlbumModalOpen] = useState(false);
    const [isLoading, setIsLoading] = useState(true);
    const [isLoadingAlbums, setIsLoadingAlbums] = useState(true);
    const [tracks, setTracks] = useState<Track[]>([]);
    const [albums, setAlbums] = useState<MusicAlbum[]>([]);
    const [error, setError] = useState<string | null>(null);
    const [searchQuery, setSearchQuery] = useState('');
    const [isSearching, setIsSearching] = useState(false);
    const [searchResults, setSearchResults] = useState<{
        libraryTracks: Track[],
        serverTracks: Track[]
    }>({ libraryTracks: [], serverTracks: [] });

    // –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    const [pagination, setPagination] = useState<PaginationInfo>({
        total: 0,
        page: 1,
        limit: 50,
        pages: 0,
        hasMore: false,
        isLoading: false,
        lastFetchTime: 0
    });

    const [isLoadingMore, setIsLoadingMore] = useState(false);
    const searchInputRef = useRef<HTMLInputElement>(null);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ—Ñ—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    const paginationRef = useRef<PaginationInfo>({
        total: 0,
        page: 1,
        limit: 50,
        pages: 0,
        hasMore: false,
        isLoading: false,
        lastFetchTime: 0
    });

    const requestIdRef = useRef<number>(0);
    const albumRequestInProgressRef = useRef<boolean>(false);
    const lastAlbumRequestTimeRef = useRef<number>(0);

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å ref –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    useEffect(() => {
        paginationRef.current = pagination;
    }, [pagination]);

    const {
        playTrack,
        currentTrack: playerTrack,
        isPlaying: playerIsPlaying,
        getTrackCover,
        addToQueue
    } = usePlayer();

    const { clearQueue, addTracksToQueue } = useQueue();

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const fetchUserName = useCallback(async () => {
        if (isViewingOtherUser && targetUserId) {
            try {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Ç–∏–ª–∏—Ç—É api –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ fetch
                const userData = await api.get(`/users/${targetUserId}`);
                
                if (userData && userData.firstName) {
                    setOtherUserName(`${userData.firstName} ${userData.lastName || ''}`);
                } else {
                    setOtherUserName(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Ññ${targetUserId}`);
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
                setOtherUserName(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Ññ${targetUserId}`);
            }
        }
    }, [isViewingOtherUser, targetUserId]);

    // –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–æ–≤
    const fetchTracks = useCallback(async (page: number, resetData: boolean = false) => {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞
        const requestId = ++requestIdRef.current;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∑–∫–∞
        if (paginationRef.current.isLoading) {
            console.log('‚õî –ó–∞–≥—Ä—É–∑–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (–º–∏–Ω–∏–º—É–º 1000 –º—Å –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏)
        const now = Date.now();
        if (now - paginationRef.current.lastFetchTime < 1000) {
            console.log(`‚õî –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã (${now - paginationRef.current.lastFetchTime}–º—Å), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –≤ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
        if (page > 1 && !paginationRef.current.hasMore) {
            console.log('‚õî –ù–µ—Ç –±–æ–ª—å—à–µ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å');
            return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
        setPagination(prev => ({
            ...prev,
            isLoading: true,
            lastFetchTime: now
        }));

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ UI
        if (resetData) {
            setIsLoading(true);
        } else if (page > 1) {
            setIsLoadingMore(true);
        }

        try {
            console.log(`üîÑ –ó–∞–ø—Ä–æ—Å —Ç—Ä–µ–∫–æ–≤ #${requestId}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}, –ª–∏–º–∏—Ç ${paginationRef.current.limit}`);
            
            let result;
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, —á—å—é –º—É–∑—ã–∫—É –º—ã –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º
            if (isViewingOtherUser && targetUserId) {
                console.log(`–ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUserId}`);
                result = await MusicService.getUserTracksByUserId(targetUserId, page, paginationRef.current.limit);
            } else {
                result = await MusicService.getUserTracksPaginated(page, paginationRef.current.limit);
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω –±–æ–ª–µ–µ –Ω–æ–≤—ã–º
            if (requestIdRef.current > requestId) {
                console.log(`‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å #${requestId} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –±–æ–ª–µ–µ –Ω–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º #${requestIdRef.current}`);
                return;
            }

            console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ #${requestId}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}:`, result);

            // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –≤—ã–≤–æ–¥—ã
            console.log('üîç –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞:');
            if (result && typeof result === 'object') {
                console.log('- –°—Ç—Ä—É–∫—Ç—É—Ä–∞ result:', Object.keys(result));
                console.log('- result.tracks:', result.tracks);
                console.log('- result.tracks.length:', result.tracks ? result.tracks.length : 'undefined');
                console.log('- –¢–∏–ø result:', typeof result);
                console.log('- result instanceof Array:', Array.isArray(result));
            } else {
                console.log('- –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º:', result);
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç—Ä–µ–∫–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            const tracks = result?.tracks || [];
            console.log(`üì¶ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏ (${tracks.length}):`, tracks);

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ tracks –ø—É—Å—Ç–æ–π, –Ω–æ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
            if (tracks.length === 0 && result && typeof result === 'object' && 'tracks' in result) {
                console.warn('‚ö†Ô∏è –ú–∞—Å—Å–∏–≤ —Ç—Ä–µ–∫–æ–≤ –ø—É—Å—Ç, —Ö–æ—Ç—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–µ tracks:', result);
            }

            const totalTracks = result?.totalTracks || result?.pagination?.total || 0;
            const paginationData = result?.pagination || {
                total: totalTracks,
                page: page,
                limit: paginationRef.current.limit,
                pages: Math.ceil(totalTracks / paginationRef.current.limit),
                hasMore: (page * paginationRef.current.limit) < totalTracks
            };

            // –í—ã—á–∏—Å–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            const totalPages = paginationData.pages || Math.ceil(totalTracks / paginationRef.current.limit);
            const hasMorePages = paginationData.hasMore !== undefined
                ? paginationData.hasMore
                : (page < totalPages && tracks.length > 0);

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            setPagination(prev => ({
                ...prev,
                total: totalTracks,
                page: page,
                pages: totalPages,
                hasMore: hasMorePages,
                isLoading: false
            }));

            // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç—Ä–µ–∫–æ–≤
            console.log(`üéµ –ü–æ–ª—É—á–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤: ${tracks.length}, –≤—Å–µ–≥–æ: ${totalTracks}, —Å—Ç—Ä–∞–Ω–∏—Ü: ${totalPages}, hasMore: ${hasMorePages}`);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤
            setTracks(prevTracks => {
                console.log('üìã –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤:', prevTracks);
                console.log('üìã –ù–æ–≤—ã–µ —Ç—Ä–µ–∫–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞:', tracks);

                // –ü—Ä–∏ —Å–±—Ä–æ—Å–µ –∏–ª–∏ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∑–∞–º–µ–Ω—è–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é
                if (resetData || page === 1) {
                    console.log('üìã –ü–æ–ª–Ω–∞—è –∑–∞–º–µ–Ω–∞ —Ç—Ä–µ–∫–æ–≤:', tracks);
                    return [...tracks];
                }

                // –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ) —Ç—Ä–µ–∫–∏
                const existingIds = new Set(prevTracks.map(t => t.id));
                const newTracks = tracks.filter((track: Track) => !existingIds.has(track.id));

                console.log(`üìã –î–æ–±–∞–≤–ª–µ–Ω–æ ${newTracks.length} –Ω–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤ (–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ ${tracks.length - newTracks.length} –¥—É–±–ª–µ–π)`);

                // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤, –æ—Ç–∫–ª—é—á–∞–µ–º hasMore
                if (newTracks.length === 0 && tracks.length > 0) {
                    setPagination(prev => ({ ...prev, hasMore: false }));
                    console.log('‚ö†Ô∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤, –æ—Ç–∫–ª—é—á–∞–µ–º hasMore');
                }

                const updatedTracks = [...prevTracks, ...newTracks];
                console.log('üìã –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤:', updatedTracks);
                return updatedTracks;
            });

            setError(null);
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–∫–æ–≤:', err);
            setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–µ–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            setPagination(prev => ({
                ...prev,
                isLoading: false
            }));
        } finally {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Ñ–ª–∞–≥–∏ –∑–∞–≥—Ä—É–∑–∫–∏ UI
            setIsLoading(false);
            setIsLoadingMore(false);
        }
    }, [isViewingOtherUser, targetUserId]);

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∞–ª—å–±–æ–º–æ–≤
    const fetchAlbums = useCallback(async () => {
        // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –Ω–µ –¥–µ–ª–∞–µ–º –Ω–æ–≤—ã–π
        if (albumRequestInProgressRef.current) {
            console.warn('[MusicPage] –ó–∞–ø—Ä–æ—Å –∞–ª—å–±–æ–º–æ–≤ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤ fetchAlbums.');
            return;
        }
        
        albumRequestInProgressRef.current = true;
        setIsLoadingAlbums(true);
        
        try {
            let albumsData;
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, —á—å—é –º—É–∑—ã–∫—É –º—ã –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º
            if (isViewingOtherUser && targetUserId) {
                console.log(`–ü–æ–ª—É—á–∞–µ–º –∞–ª—å–±–æ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUserId}`);
                albumsData = await MusicAlbumService.getUserAlbumsByUserId(targetUserId);
            } else {
                console.log('–ü–æ–ª—É—á–∞–µ–º –∞–ª—å–±–æ–º—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
                albumsData = await MusicAlbumService.getUserAlbumsByUserId('current');
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ albumsData —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º
            if (albumsData && Array.isArray(albumsData)) {
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ isInLibrary –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∞–ª—å–±–æ–º–æ–≤, –≥–¥–µ –æ–Ω–æ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ
                const processedAlbums = albumsData.map((album: MusicAlbum) => ({
                    ...album,
                    isInLibrary: album.isInLibrary !== undefined ? album.isInLibrary : true
                }));
                
                console.log(`[MusicPage] –ü–æ–ª—É—á–µ–Ω–æ ${processedAlbums.length} –∞–ª—å–±–æ–º–æ–≤, –¥–æ–±–∞–≤–ª–µ–Ω–æ —Å–≤–æ–π—Å—Ç–≤–æ isInLibrary –≥–¥–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ`);
                setAlbums(processedAlbums);
            } else {
                console.log('[MusicPage] –ü–æ–ª—É—á–µ–Ω—ã –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–ª—å–±–æ–º–æ–≤:', albumsData);
                setAlbums([]);
            }
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–ª—å–±–æ–º–æ–≤:', err);
            setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–ª—å–±–æ–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        } finally {
            setIsLoadingAlbums(false);
            albumRequestInProgressRef.current = false;
        }
    }, [isViewingOtherUser, targetUserId]);

    // –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤
    const handleSearch = async () => {
        if (!searchQuery.trim()) {
            // –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –æ–±—ã—á–Ω–æ–º—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—é
            setIsSearching(false);
            return;
        }

        try {
            setIsSearching(true);
            const results = await MusicService.searchTracks(searchQuery);
            setSearchResults(results);
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—Ä–µ–∫–æ–≤:', err);
            setError('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    };

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    useEffect(() => {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        setPagination({
            total: 0,
            page: 1,
            limit: 50,
            pages: 0,
            hasMore: false,
            isLoading: false,
            lastFetchTime: 0
        });

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç—Ä–µ–∫–æ–≤ –∏ –∞–ª—å–±–æ–º—ã
        fetchTracks(1, true);
        fetchAlbums();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –µ—Å–ª–∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º —á—É–∂—É—é –º—É–∑—ã–∫—É
        if (isViewingOtherUser) {
            fetchUserName();
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è beforeunload –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ä–µ—Ñ–æ–≤ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const handleBeforeUnload = () => {
            albumRequestInProgressRef.current = false;
        };

        window.addEventListener('beforeunload', handleBeforeUnload);

        return () => {
            window.removeEventListener('beforeunload', handleBeforeUnload);
        };
    }, [fetchTracks, fetchAlbums, fetchUserName, isViewingOtherUser]);

    // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–∫—Ä–æ–ª–ª–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    useEffect(() => {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º throttle –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –≤—ã–∑–æ–≤–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∫—Ä–æ–ª–ª–∞
        let throttleTimeout: NodeJS.Timeout | null = null;
        const throttleDelay = 200; // –º—Å

        const handleScroll = () => {
            // –ï—Å–ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è throttle, –≤—ã—Ö–æ–¥–∏–º
            if (throttleTimeout) return;

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è throttle
            throttleTimeout = setTimeout(() => {
                throttleTimeout = null;

                // –ï—Å–ª–∏ –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ –ø–æ–∏—Å–∫, –∏–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü, –Ω–µ –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
                if (paginationRef.current.isLoading || isSearching || !paginationRef.current.hasMore) {
                    return;
                }

                // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–∫—Ä–æ–ª–ª–∞
                const scrollPosition = window.innerHeight + window.scrollY;
                const documentHeight = document.documentElement.scrollHeight;
                const scrollThreshold = 0.85; // 85% –≤—ã—Å–æ—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞

                // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ø–æ—Ä–æ–≥ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏, –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                if (scrollPosition >= documentHeight * scrollThreshold) {
                    const nextPage = paginationRef.current.page + 1;
                    console.log(`üìú –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ø–æ—Ä–æ–≥ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ (${Math.round(scrollPosition / documentHeight * 100)}%), –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É ${nextPage}`);
                    fetchTracks(nextPage, false);
                }
            }, throttleDelay);
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫—Ä–æ–ª–ª–∞ –∏ –æ—á–∏—â–∞–µ–º –µ–≥–æ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        window.addEventListener('scroll', handleScroll);

        return () => {
            window.removeEventListener('scroll', handleScroll);
            if (throttleTimeout) {
                clearTimeout(throttleTimeout);
            }
        };
    }, [fetchTracks, isSearching]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–∫–∞ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    const handlePlayTrack = (track: Track) => {
        playTrack(track);
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞
    const handleDeleteTrack = async (trackId: number, event: React.MouseEvent) => {
        event.stopPropagation();

        try {
            await MusicService.deleteTrack(trackId);

            // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            fetchTracks(pagination.page, true);

        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞:', err);
            setError('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–∫–∞
    const handleTrackUploaded = (track: Track) => {
        // –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–∫–∞ –¥–µ–ª–∞–µ–º –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        fetchTracks(1, true);
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–æ–≤
    const handleTracksUploaded = (newTracks: any[]) => {
        // –ü—Ä–∏ –º–∞—Å—Å–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–∫–æ–≤ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        fetchTracks(1, true);
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∞–ª—å–±–æ–º–∞
    const handleAlbumClick = (albumId: number) => {
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–ª—å–±–æ–º–∞
        window.location.href = `/music/albums/${albumId}`;
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞–ª—å–±–æ–º–∞
    const handlePlayAlbum = async (albumId: number) => {
        try {
            const album = await MusicAlbumService.getAlbumById(albumId);
            if (album && album.tracks && album.tracks.length > 0) {
                clearQueue();
                addTracksToQueue(album.tracks);
                playTrack(album.tracks[0]);
            }
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ –∞–ª—å–±–æ–º–∞:', err);
        }
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã –ø–æ–∏—Å–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Enter
    const handleSearchKeyDown = (event: React.KeyboardEvent) => {
        if (event.key === 'Enter') {
            handleSearch();
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –æ–±—ã—á–Ω–æ–º—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—é
    const handleClearSearch = () => {
        setSearchQuery('');
        setIsSearching(false);
        if (searchInputRef.current) {
            searchInputRef.current.focus();
        }
    };

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    const renderContent = () => {
        if (isSearching) {
            // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
            return renderSearchResults();
        } else {
            // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            return (
                <div className={styles.contentBlock}>
                    {renderAlbumsSection()}
                    {renderTracksSection()}
                </div>
            );
        }
    };

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ —Å –∞–ª—å–±–æ–º–∞–º–∏
    const renderAlbumsSection = () => {
        return (
            <div className={styles.section}>
                <div className={styles.sectionHeader}>
                    <h2 className={styles.sectionTitle}>
                        <LibraryMusic className={styles.sectionIcon} />
                        –ê–ª—å–±–æ–º—ã
                    </h2>
                    {!isViewingOtherUser && (
                        <button 
                            onClick={() => setIsCreateAlbumModalOpen(true)} 
                            className={`${styles.createAlbumButton}`}
                        >
                            <div className={styles.createAlbumButtonText}>
                                <AddIcon />
                                <h4 className={styles.createAlbumButtonLabel}>–°–æ–∑–¥–∞—Ç—å –∞–ª—å–±–æ–º</h4>
                            </div>
                        </button>
                    )}
                </div>

                {isLoadingAlbums ? (
                    <div className={styles.loading}>
                        <Spinner />
                        <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∞–ª—å–±–æ–º–æ–≤...</p>
                    </div>
                ) : (
                    <div className={styles.albumsGrid}>
                        {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–ª—å–±–æ–º–æ–≤ */}
                        {albums.map(album => (
                            <UniversalMusicAlbumItem
                                key={album.id}
                                album={album}
                                variant="grid"
                                onAlbumClick={() => handleAlbumClick(album.id)}
                                onLibraryStatusChange={(status) => {
                                    // –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–ª—å–±–æ–º–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–ª—å–±–æ–º–æ–≤
                                    console.log(`–°—Ç–∞—Ç—É—Å –∞–ª—å–±–æ–º–∞ "${album.title}" (ID:${album.id}) –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –∏–∑–º–µ–Ω–µ–Ω: ${status ? '–î–æ–±–∞–≤–ª–µ–Ω' : '–£–¥–∞–ª–µ–Ω'}`);
                                    fetchAlbums();
                                }}
                            />
                        ))}

                        {albums.length === 0 && !isLoadingAlbums && (
                            <div className={styles.emptyStateSmall}>
                                <p>{isViewingOtherUser ? `–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—É–±–ª–∏—á–Ω—ã—Ö –∞–ª—å–±–æ–º–æ–≤` : '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∞–ª—å–±–æ–º–æ–≤'}</p>
                            </div>
                        )}
                    </div>
                )}
            </div>
        );
    };

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ —Å —Ç—Ä–µ–∫–∞–º–∏
    const renderTracksSection = () => {
        console.log('üéµ –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–µ–∫—Ü–∏–∏ —Ç—Ä–µ–∫–æ–≤:', {
            tracks: tracks,
            isLoading: isLoading,
            isLoadingMore: isLoadingMore,
            tracksLength: tracks.length,
            error: error,
            page: pagination.page,
            total: pagination.total,
            hasMore: pagination.hasMore
        });

        return (
            <div className={styles.section}>
                <div className={styles.sectionHeader}>
                    <h2 className={styles.sectionTitle}>
                        <Audiotrack className={styles.sectionIcon} />
                        {isViewingOtherUser ? `–ú—É–∑—ã–∫–∞` : '–ú–æ—è –º—É–∑—ã–∫–∞'}
                    </h2>
                </div>

                <div className={styles.trackListContainer}>
                    {isLoading && pagination.page === 1 ? (
                        <div className={styles.loading}>
                            <Spinner />
                            <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–∫–æ–≤...</p>
                        </div>
                    ) : error ? (
                        <div className={styles.errorMessage}>{error}</div>
                    ) : tracks.length === 0 ? (
                        <div className={styles.emptyState}>
                            <p>{isViewingOtherUser ? `–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤` : '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤'}</p>
                            {!isViewingOtherUser && (
                                <>
                                    <p>–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –º—É–∑—ã–∫—É –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏:</p>
                                    <ul className={styles.uploadOptionsList}>
                                        <li>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "+" –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –æ–¥–∏–Ω —Ç—Ä–µ–∫</li>
                                        <li>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–≥—Ä—É–∑–∏—Ç—å –º—É–∑—ã–∫—É" –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–æ–≤</li>
                                    </ul>
                                </>
                            )}
                        </div>
                    ) : (
                        <div className={styles.trackList}>
                            <div className={styles.trackListHeader}>
                                <div className={styles.trackCount}>
                                    –ù–∞–π–¥–µ–Ω–æ: {pagination.total} {getPluralForm(pagination.total, '—Ç—Ä–µ–∫', '—Ç—Ä–µ–∫–∞', '—Ç—Ä–µ–∫–æ–≤')}
                                </div>
                            </div>

                            <div className={styles.tracksList}>
                                {tracks.map((track, index) => (
                                    <UniversalTrackItem
                                        key={track.id}
                                        track={track}
                                        isInLibrary={!isViewingOtherUser}
                                        onLibraryStatusChange={() => fetchTracks(1, true)}
                                        onPlayClick={() => handlePlayTrack(track)}
                                    />
                                ))}
                            </div>

                            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ */}
                            {isLoadingMore && (
                                <div className={styles.loadingMore}>
                                    <Spinner />
                                    <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–∫–æ–≤...</p>
                                </div>
                            )}

                            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞ */}
                            {!isLoadingMore && !pagination.hasMore && tracks.length > 0 && (
                                <div className={styles.endOfList}>
                                    <span>–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞ ({pagination.total} {getPluralForm(pagination.total, '—Ç—Ä–µ–∫', '—Ç—Ä–µ–∫–∞', '—Ç—Ä–µ–∫–æ–≤')})</span>
                                </div>
                            )}
                        </div>
                    )}
                </div>
            </div>
        );
    };

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
    const renderSearchResults = () => {
        const { libraryTracks, serverTracks } = searchResults;
        const hasResults = libraryTracks.length > 0 || serverTracks.length > 0;

        return (
            <div className={styles.searchResults}>
                <div className={styles.searchResultsHeader}>
                    <h2 className={styles.searchResultsTitle}>
                        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: "{searchQuery}"
                    </h2>
                    <button
                        className={styles.clearSearchButton}
                        onClick={handleClearSearch}
                    >
                        –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ
                    </button>
                </div>

                {!hasResults && (
                    <div className={styles.emptyState}>
                        <p>–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</p>
                        <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ</p>
                    </div>
                )}

                {libraryTracks.length > 0 && (
                    <div className={styles.searchSection}>
                        <h3 className={styles.searchSectionTitle}>–í –í–∞—à–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ</h3>
                        <div className={styles.tracksList}>
                            {libraryTracks.map((track) => (
                                <UniversalTrackItem
                                    key={`lib-${track.id}`}
                                    track={track}
                                    isInLibrary={true}
                                    onLibraryStatusChange={() => fetchTracks(1, true)}
                                    onPlayClick={() => handlePlayTrack(track)}
                                />
                            ))}
                        </div>
                    </div>
                )}

                {serverTracks.length > 0 && (
                    <div className={styles.searchSection}>
                        <h3 className={styles.searchSectionTitle}>–í —Å–µ—Ç–∏</h3>
                        <div className={styles.tracksList}>
                            {serverTracks.map((track) => (
                                <UniversalTrackItem
                                    key={`server-${track.id}`}
                                    track={track}
                                    isInLibrary={false}
                                    onLibraryStatusChange={() => fetchTracks(1, true)}
                                    onPlayClick={() => handlePlayTrack(track)}
                                />
                            ))}
                        </div>
                    </div>
                )}
            </div>
        );
    };

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–∫–ª–æ–Ω–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∏—Å–ª–∞
    const getPluralForm = (count: number, form1: string, form2: string, form5: string): string => {
        const lastDigit = count % 10;
        const lastTwoDigits = count % 100;

        if (lastDigit === 1 && lastTwoDigits !== 11) {
            return form1;
        }

        if (lastDigit >= 2 && lastDigit <= 4 && (lastTwoDigits < 10 || lastTwoDigits >= 20)) {
            return form2;
        }

        return form5;
    };

    const handleAlbumCreated = (albumId: number) => {
        console.log(`–ê–ª—å–±–æ–º —Å ID ${albumId} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω`);
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–ª—å–±–æ–º–æ–≤ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
        fetchAlbums();
    };

    return (
        <div className={styles.musicPage}>
            {isViewingOtherUser && (
                <div className={styles.otherUserHeader}>
                    <div className={styles.otherUserInfo}>
                        <Person className={styles.userIcon} />
                        <h1 className={styles.otherUserName}>
                            {otherUserName || `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Ññ${targetUserId}`}
                        </h1>
                    </div>
                </div>
            )}
        
            {/* –ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ */}
            {!isViewingOtherUser && (
                <div className={styles.searchContainer}>
                    <div className={styles.searchInputContainer}>
                        <SearchIcon className={styles.searchIcon} />
                        <input
                            type="text"
                            className={styles.searchInput}
                            placeholder="–ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤..."
                            value={searchQuery}
                            onChange={(e) => setSearchQuery(e.target.value)}
                            onKeyDown={handleSearchKeyDown}
                            ref={searchInputRef}
                        />
                        {searchQuery && (
                            <button
                                className={styles.clearSearchInputButton}
                                onClick={() => setSearchQuery('')}
                            >
                                <CloseIcon sx={{ 
                                        fontSize: SECONDARY_ICON_SIZE,
                                        color: 'var(--vseti-color-text-muted)'
                                    }} />
                            </button>
                        )}
                    </div>
                    <button
                        className={`${styles.searchButton} ${!searchQuery ? styles.disabled : ''}`}
                        onClick={handleSearch}
                        disabled={!searchQuery}
                    >
                        –ù–∞–π—Ç–∏
                    </button>
                </div>
            )}

            {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
            {renderContent()}

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª—å–±–æ–º–∞ */}
            {!isViewingOtherUser && (
                <CreateAlbumModal
                    isOpen={isCreateAlbumModalOpen}
                    onClose={() => setIsCreateAlbumModalOpen(false)}
                    onAlbumCreated={handleAlbumCreated}
                    availableTracks={tracks}
                    userId={user?.id}
                />
            )}

            {/* –ü–ª–∞–≤–∞—é—â–∞—è –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è */}
            {!isViewingOtherUser && (
                <UploadAudio
                    onTrackUploaded={handleTrackUploaded}
                    maxFileSize={100 * 1024 * 1024} // 100 –ú–ë
                >
                    <div className={styles.floatingAddButton}>
                        <AddIcon />
                    </div>
                </UploadAudio>
            )}

            {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–æ–≤ */}
            {!isViewingOtherUser && (
                <MultiUploadAudio
                    onTracksUploaded={handleTracksUploaded}
                    maxFileSize={100 * 1024 * 1024} // 100 –ú–ë
                >
                    <button className={styles.multiUploadButton}>
                        –ó–∞–≥—Ä—É–∑–∏—Ç—å –º—É–∑—ã–∫—É
                    </button>
                </MultiUploadAudio>
            )}
        </div>
    );
};

export default MusicPage; 