import React, { useCallback, useRef } from 'react';
import { Post as PostType } from '../../types/post.types';
import { Post } from '../Post/Post';
import styles from './PostFeed.module.css';
import { API_URL } from '../../config';
import { useInfiniteScroll } from '../../utils/useInfiniteScroll';
import { tokenService } from '../../utils/api';

interface PostFeedProps {
    showOnlySubscribedGroups?: boolean;
}

export const PostFeed: React.FC<PostFeedProps> = ({ showOnlySubscribedGroups = false }) => {
    const PAGE_SIZE = 10;

    const loadMorePosts = useCallback(async (page: number) => {
        try {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ showOnlySubscribedGroups
            const baseUrl = showOnlySubscribedGroups 
                ? `${API_URL}/posts/subscribed-groups` 
                : `${API_URL}/posts`;
            
            const url = `${baseUrl}?limit=${PAGE_SIZE}&offset=${page * PAGE_SIZE}`;
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
            const token = tokenService.getToken();
            const headers: HeadersInit = {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            };
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if (token) {
                headers['Authorization'] = `Bearer ${token}`;
            }
            
            console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ ${url}...`);
            const response = await fetch(url, {
                method: 'GET',
                headers
            });

            if (!response.ok) {
                const errorText = await response.text();
                console.error('Error response:', errorText);
                throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å—Ç—ã: ${response.status} ${response.statusText}`);
            }

            const data = await response.json();
            console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã:', data);
            
            if (!Array.isArray(data)) {
                console.error('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:', data);
                throw new Error('–î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–æ–≤ –∏–º–µ—é—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç');
            }
            
            console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.length} –ø–æ—Å—Ç–æ–≤`);
            return data;
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å—Ç–æ–≤:', err);
            throw err;
        }
    }, [showOnlySubscribedGroups, PAGE_SIZE]);

    const hasMorePosts = useCallback((data: PostType[]) => {
        return data.length === PAGE_SIZE;
    }, [PAGE_SIZE]);

    const {
        data: posts,
        loading,
        error,
        lastElementRef,
        hasMore
    } = useInfiniteScroll<PostType>({
        loadMore: loadMorePosts,
        hasMore: hasMorePosts,
        pageSize: PAGE_SIZE
    });

    return (
        <div className={styles.container}>
            {posts.length === 0 && !loading && !error ? (
                <div className={styles.empty}>
                    <p>–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤ üòî</p>
                </div>
            ) : (
                <div className={styles.feed}>
                    {posts.map((post, index) => {
                        // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –∏ –µ—Å—Ç—å –µ—â–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏,
                        // –¥–æ–±–∞–≤–ª—è–µ–º ref –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                        if (index === posts.length - 1 && hasMore) {
                            return (
                                <div key={post.id} ref={lastElementRef}>
                                    <Post post={post} />
                                </div>
                            );
                        }
                        return <Post key={post.id} post={post} />;
                    })}
                    
                    {loading && (
                        <div className={styles.loading}>
                            <div className={styles.loadingSpinner}></div>
                            <p>–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤...</p>
                        </div>
                    )}
                    
                    {error && (
                        <div className={styles.error}>
                            <p>üòï {error}</p>
                            <button 
                                className={styles.retryButton}
                                onClick={() => window.location.reload()}
                            >
                                –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                            </button>
                        </div>
                    )}
                    
                    {!loading && !error && posts.length > 0 && !hasMore && (
                        <div className={styles.endOfFeed}>
                            <div className={styles.endOfFeedLine}></div>
                            <div className={styles.endOfFeedText}>–ö–æ–Ω–µ—Ü –ª–µ–Ω—Ç—ã</div>
                            <div className={styles.endOfFeedLine}></div>
                        </div>
                    )}
                </div>
            )}
        </div>
    );
};