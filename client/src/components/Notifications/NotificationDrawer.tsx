import React, { useState, useRef, useEffect } from 'react';
import { useNotifications } from '../../contexts/notification.context';
import styles from './NotificationDrawer.module.css';

// –¢–∏–ø—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –ø–∞–Ω–µ–ª–∏ (–æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
export type NotificationDrawerItemType = 'group' | 'friend' | 'post' | 'comment' | 'system';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ö—Ä–∞–Ω–∏–º–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
export interface NotificationDrawerItem {
  id: string;
  title: string;
  message: string;
  type: NotificationDrawerItemType;
  timestamp: Date;
  read: boolean;
  link?: string; // –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  imageUrl?: string; // URL –∞–≤–∞—Ç–∞—Ä–∫–∏ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
}

// –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
const MOCK_NOTIFICATIONS: NotificationDrawerItem[] = [
  {
    id: '1',
    title: '–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –≤ –¥—Ä—É–∑—å—è',
    message: '–ú–∏—Ö–∞–∏–ª –ò–≤–∞–Ω–æ–≤ —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å –≤ –¥—Ä—É–∑—å—è',
    type: 'friend',
    timestamp: new Date(Date.now() - 1000 * 60 * 5), // 5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
    read: false,
    link: '/friends',
    imageUrl: 'https://placehold.co/48x48'
  },
  {
    id: '2',
    title: '–ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
    message: '–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞ –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª–∞ –≤–∞—à—É –∑–∞–ø–∏—Å—å: "–û—Ç–ª–∏—á–Ω—ã–π –ø–æ—Å—Ç!"',
    type: 'comment',
    timestamp: new Date(Date.now() - 1000 * 60 * 30), // 30 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
    read: false,
    link: '/users/1?post=123',
    imageUrl: 'https://placehold.co/48x48'
  },
  {
    id: '3',
    title: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ',
    message: '–í –≥—Ä—É–ø–ø–µ "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ 2024" –Ω–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è',
    type: 'group',
    timestamp: new Date(Date.now() - 1000 * 60 * 60 * 2), // 2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
    read: true,
    link: '/groups/123',
    imageUrl: 'https://placehold.co/48x48'
  },
  {
    id: '4',
    title: '–°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
    message: '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
    type: 'system',
    timestamp: new Date(Date.now() - 1000 * 60 * 60 * 24), // 1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥
    read: true
  }
];

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
const formatTime = (date: Date): string => {
  const now = new Date();
  const diff = now.getTime() - date.getTime();
  
  // –ú–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã
  if (diff < 60 * 1000) {
    return '–¢–æ–ª—å–∫–æ —á—Ç–æ';
  }
  
  // –ú–∏–Ω—É—Ç—ã
  if (diff < 60 * 60 * 1000) {
    const minutes = Math.floor(diff / (60 * 1000));
    return `${minutes} ${getMinutesText(minutes)} –Ω–∞–∑–∞–¥`;
  }
  
  // –ß–∞—Å—ã
  if (diff < 24 * 60 * 60 * 1000) {
    const hours = Math.floor(diff / (60 * 60 * 1000));
    return `${hours} ${getHoursText(hours)} –Ω–∞–∑–∞–¥`;
  }
  
  // –î–Ω–∏
  if (diff < 7 * 24 * 60 * 60 * 1000) {
    const days = Math.floor(diff / (24 * 60 * 60 * 1000));
    return `${days} ${getDaysText(days)} –Ω–∞–∑–∞–¥`;
  }
  
  // –ü–æ–ª–Ω–∞—è –¥–∞—Ç–∞
  return date.toLocaleDateString('ru-RU', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric'
  });
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å–∫–ª–æ–Ω–µ–Ω–∏–π
const getMinutesText = (minutes: number): string => {
  if (minutes % 10 === 1 && minutes % 100 !== 11) return '–º–∏–Ω—É—Ç—É';
  if ([2, 3, 4].includes(minutes % 10) && ![12, 13, 14].includes(minutes % 100)) return '–º–∏–Ω—É—Ç—ã';
  return '–º–∏–Ω—É—Ç';
};

const getHoursText = (hours: number): string => {
  if (hours % 10 === 1 && hours % 100 !== 11) return '—á–∞—Å';
  if ([2, 3, 4].includes(hours % 10) && ![12, 13, 14].includes(hours % 100)) return '—á–∞—Å–∞';
  return '—á–∞—Å–æ–≤';
};

const getDaysText = (days: number): string => {
  if (days % 10 === 1 && days % 100 !== 11) return '–¥–µ–Ω—å';
  if ([2, 3, 4].includes(days % 10) && ![12, 13, 14].includes(days % 100)) return '–¥–Ω—è';
  return '–¥–Ω–µ–π';
};

interface NotificationDrawerProps {
  isOpen: boolean;
  onClose: () => void;
}

const NotificationDrawer: React.FC<NotificationDrawerProps> = ({ isOpen, onClose }) => {
  const [notifications, setNotifications] = useState<NotificationDrawerItem[]>(MOCK_NOTIFICATIONS);
  const drawerRef = useRef<HTMLDivElement>(null);
  
  // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –ø–∞–Ω–µ–ª–∏
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (drawerRef.current && !drawerRef.current.contains(event.target as Node) && isOpen) {
        onClose();
      }
    };
    
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isOpen, onClose]);
  
  // –ü–æ–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
  const markAsRead = (id: string) => {
    setNotifications(prev => 
      prev.map(notif => 
        notif.id === id ? { ...notif, read: true } : notif
      )
    );
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é
  const handleNotificationClick = (notification: NotificationDrawerItem) => {
    markAsRead(notification.id);
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞, –º–æ–∂–Ω–æ –∑–¥–µ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    // navigate(notification.link);
  };
  
  // –ü–æ–º–µ—Ç–∏—Ç—å –≤—Å–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
  const markAllAsRead = () => {
    setNotifications(prev => 
      prev.map(notif => ({ ...notif, read: true }))
    );
  };
  
  // –ö–æ–ª-–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const unreadCount = notifications.filter(notif => !notif.read).length;
  
  if (!isOpen) return null;
  
  return (
    <div className={styles.drawer} ref={drawerRef}>
      <div className={styles.header}>
        <h3 className={styles.title}>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h3>
        {unreadCount > 0 && (
          <button 
            className={styles.markReadButton}
            onClick={markAllAsRead}
          >
            –ü—Ä–æ—á–∏—Ç–∞—Ç—å –≤—Å–µ
          </button>
        )}
      </div>
      
      <div className={styles.content}>
        {notifications.length === 0 ? (
          <div className={styles.emptyState}>
            <p>–£ –≤–∞—Å –Ω–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</p>
          </div>
        ) : (
          <ul className={styles.notificationList}>
            {notifications.map((notification) => (
              <li 
                key={notification.id} 
                className={`${styles.notificationItem} ${!notification.read ? styles.unread : ''}`}
                onClick={() => handleNotificationClick(notification)}
              >
                {notification.imageUrl ? (
                  <div className={styles.avatar}>
                    <img src={notification.imageUrl} alt="" />
                  </div>
                ) : (
                  <div className={`${styles.typeIcon} ${styles[notification.type]}`}>
                    {/* –ò–∫–æ–Ω–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ */}
                    {notification.type === 'friend' && 'üë§'}
                    {notification.type === 'comment' && 'üí¨'}
                    {notification.type === 'group' && 'üë•'}
                    {notification.type === 'post' && 'üìÑ'}
                    {notification.type === 'system' && '‚öôÔ∏è'}
                  </div>
                )}
                <div className={styles.notificationContent}>
                  <div className={styles.notificationHeader}>
                    <h4 className={styles.notificationTitle}>{notification.title}</h4>
                    <span className={styles.timestamp}>{formatTime(notification.timestamp)}</span>
                  </div>
                  <p className={styles.notificationMessage}>{notification.message}</p>
                </div>
                {!notification.read && <div className={styles.unreadIndicator}></div>}
              </li>
            ))}
          </ul>
        )}
      </div>
      
      <div className={styles.footer}>
        <a href="/notifications" className={styles.allNotificationsLink}>
          –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        </a>
      </div>
    </div>
  );
};

export default NotificationDrawer; 